version: 2
jobs:
  build:
    working_directory: ~/fagdag
    docker:
      - image: circleci/node:9.11
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: making sure we're in the root directory
          command: ls -a
      - run:
          name: Does docker even exist
          command: docker -v
      - run:
          name: npm install
          command: npm install
      - run: 
          name: building docker image
          command: docker build --rm=false -t asia.gcr.io/${PROJECT}/${DOCKER_IMAGE}:$CIRCLE_SHA1 .
      - run:
          name: Mkdir docker-cache
          command: mkdir -p docker-cache
      - run:
          name: Save docker image to cache directory
          command: docker save -o docker-cache/built-image.tar asia.gcr.io/${PROJECT}/${DOCKER_IMAGE}:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - docker-cache
      - save_cache:
          key: node-modules-{{ checksum "package.json" }}
          paths:
            - node_modules
  test:
    working_directory: ~/fagdag
    docker:
      - image: circleci/node:9.11
      - image: circleci/redis
      - image: mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_USER: root
          MYSQL_DATABASE: db
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-modules-{{ checksum "package.json" }}
      - run:
          name: installing mysql client from apt
          command: sudo apt install -y mysql-client
      - run:
          name: migrate and seed
          command: npm run db:migrate && npm run db:seed:run
      - run:
          name: npm test
          command: npm test

  deploy-staging:
    working_directory: ~/fagdag
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Load docker image from cache
          command: docker load --input docker-cache/built-image.tar
      - run:
          name: Auth gCloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
            gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
            gcloud --quiet container clusters get-credentials fagdag1
      - run: 
          name: tag docker image with latest
          command: docker tag eu.gcr.io/${PROJECT}/${DOCKER_IMAGE}:$CIRCLE_SHA1 asia.gcr.io/${PROJECT}/${DOCKER_IMAGE}:latest
      - run:
          name: Running staging.sh
          command: bash ./deploy/staging.sh
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context: global
      - test:
          requires:
            - build
#      - deploy-staging:
#          context: global
#          requires:
#            - test